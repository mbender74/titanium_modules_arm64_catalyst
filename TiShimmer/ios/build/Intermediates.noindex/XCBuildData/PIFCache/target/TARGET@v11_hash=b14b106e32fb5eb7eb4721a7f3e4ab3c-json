{"buildConfigurations":[{"buildSettings":{"PRODUCT_NAME":"$(TARGET_NAME)"},"guid":"ac9de5d044930dc5ca57ecb90f12c578cd0d112dab15caaa9802cb09667f3197","name":"Debug"},{"buildSettings":{"PRODUCT_NAME":"$(TARGET_NAME)"},"guid":"ac9de5d044930dc5ca57ecb90f12c578b7577ca1f762e229dfeb5f6f7537bb8d","name":"Release"}],"buildPhases":[{"alwaysOutOfDate":"false","buildFiles":[],"emitEnvironment":"true","guid":"ac9de5d044930dc5ca57ecb90f12c57853d0ae915902852bf298df0c2c3bd513","inputFileListPaths":[],"inputFilePaths":[],"name":"Run Script","originalObjectID":"ECEA613218A4A76E0064AFF4","outputFileListPaths":[],"outputFilePaths":[],"scriptContents":"set -e\nset +u\n# Avoid recursively calling this script.\nif [[ $SF_MASTER_SCRIPT_RUNNING ]]\nthen\nexit 0\nfi\nset -u\nexport SF_MASTER_SCRIPT_RUNNING=1\n\nSF_TARGET_NAME=${PROJECT_NAME}\nSF_EXECUTABLE_PATH=\"lib${SF_TARGET_NAME}.a\"\nSF_WRAPPER_NAME=\"${SF_TARGET_NAME}.framework\"\n\n# The following conditionals come from\n# https://github.com/kstenerud/iOS-Universal-Framework\n\nif [[ \"$SDK_NAME\" =~ ([A-Za-z]+) ]]\nthen\nSF_SDK_PLATFORM=${BASH_REMATCH[1]}\nelse\necho \"Could not find platform name from SDK_NAME: $SDK_NAME\"\nexit 1\nfi\n\nif [[ \"$SDK_NAME\" =~ ([0-9]+.*$) ]]\nthen\nSF_SDK_VERSION=${BASH_REMATCH[1]}\nelse\necho \"Could not find sdk version from SDK_NAME: $SDK_NAME\"\nexit 1\nfi\n\nif [[ \"$SF_SDK_PLATFORM\" = \"iphoneos\" ]]\nthen\nSF_OTHER_PLATFORM=iphonesimulator\nelse\nSF_OTHER_PLATFORM=iphoneos\nfi\n\nif [[ \"$BUILT_PRODUCTS_DIR\" =~ (.*)$SF_SDK_PLATFORM$ ]]\nthen\nSF_OTHER_BUILT_PRODUCTS_DIR=\"${BASH_REMATCH[1]}${SF_OTHER_PLATFORM}\"\nelse\necho \"Could not find platform name from build products directory: $BUILT_PRODUCTS_DIR\"\nexit 1\nfi\n\n# Build the other platform.\nxcodebuild -project \"${PROJECT_FILE_PATH}\" -target \"${TARGET_NAME}\" -configuration \"${CONFIGURATION}\" -sdk ${SF_OTHER_PLATFORM}${SF_SDK_VERSION} BUILD_DIR=\"${BUILD_DIR}\" OBJROOT=\"${OBJROOT}\" BUILD_ROOT=\"${BUILD_ROOT}\" SYMROOT=\"${SYMROOT}\" $ACTION\n\n# Smash the two static libraries into one fat binary and store it in the .framework\nlipo -create \"${BUILT_PRODUCTS_DIR}/${SF_EXECUTABLE_PATH}\" \"${SF_OTHER_BUILT_PRODUCTS_DIR}/${SF_EXECUTABLE_PATH}\" -output \"${BUILT_PRODUCTS_DIR}/${SF_WRAPPER_NAME}/Versions/${FRAMEWORK_VERSION}/${SF_TARGET_NAME}\"\n\n# Copy the binary to the other architecture folder to have a complete framework in both.\ncp -a \"${BUILT_PRODUCTS_DIR}/${SF_WRAPPER_NAME}/Versions/${FRAMEWORK_VERSION}/${SF_TARGET_NAME}\" \"${SF_OTHER_BUILT_PRODUCTS_DIR}/${SF_WRAPPER_NAME}/Versions/${FRAMEWORK_VERSION}/${SF_TARGET_NAME}\"\n","shellPath":"/bin/sh","type":"com.apple.buildphase.shell-script"}],"buildRules":[],"dependencies":[{"guid":"ac9de5d044930dc5ca57ecb90f12c5788c667fb260a14aaafb4467fe6fbe4877","name":"FBShimmering"}],"guid":"ac9de5d044930dc5ca57ecb90f12c578febdff1ac4b75dec12cbf22faf84eb73","name":"Framework","provisioningSourceData":[{"bundleIdentifierFromInfoPlist":"","configurationName":"Debug","legacyTeamID":"","provisioningStyle":0},{"bundleIdentifierFromInfoPlist":"","configurationName":"Release","legacyTeamID":"","provisioningStyle":0}],"type":"aggregate"}